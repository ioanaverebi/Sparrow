/*
 * generated by Xtext 2.10.0
 */
package org.refactor.validation

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.validation.Check
import org.refactor.modelEditor.Class
import org.refactor.modelEditor.Method
import org.refactor.modelEditor.ModelEditorPackage
import org.eclipse.xtext.ui.resource.XtextResourceSetProvider
import org.eclipse.xtext.resource.IResourceDescriptions

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ModelEditorValidator extends AbstractModelEditorValidator {
	
	@Inject
    private IResourceDescriptions iResourceDescriptions
    
	@Check
	def checkFeatureEnvy(Method methodElement) {
		var checker = new FeatureEnvyChecker(methodElement);
		if (checker.check()) {
			warning(checker.getMessage(), ModelEditorPackage.Literals.METHOD__NAME);
		}
	}
	
	@Check
	def checkDataClass(Class classElement) {
		var checker = new DataClassChecker(iResourceDescriptions, classElement);
		if (checker.check()) {
			warning(checker.getMessage(), ModelEditorPackage.Literals.CLASS__NAME);
		}
	}
	
	@Check
	def checkGodClass(Class classElement) {
		var checker = new GodClassChecker(classElement);
		if (checker.check()) {
			warning(checker.getMessage(), ModelEditorPackage.Literals.CLASS__NAME);
		}
	}
	
}
