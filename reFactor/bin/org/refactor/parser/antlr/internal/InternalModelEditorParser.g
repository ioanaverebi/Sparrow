/*
 * generated by Xtext 2.10.0
 */
parser grammar InternalModelEditorParser;

options {
	tokenVocab=InternalModelEditorLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.refactor.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.refactor.services.ModelEditorGrammarAccess;

}

@members {

 	private ModelEditorGrammarAccess grammarAccess;

    public InternalModelEditorParser(TokenStream input, ModelEditorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ModelEditorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.refactor.ModelEditor.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getClassesClassParserRuleCall_1_0());
				}
				lv_classes_1_0=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"classes",
						lv_classes_1_0,
						"org.refactor.ModelEditor.Class");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Import
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.refactor.ModelEditor.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=FullStopAsterisk
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0());
			}
			    |
			this_STRING_1=RULE_STRING
			{
				$current.merge(this_STRING_1);
			}
			{
				newLeafNode(this_STRING_1, grammarAccess.getQualifiedNameAccess().getSTRINGTerminalRuleCall_0_1());
			}
		)
		(
			(
				kw=FullStop
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0_0());
				}
				this_ID_3=RULE_ID
				{
					$current.merge(this_ID_3);
				}
				{
					newLeafNode(this_ID_3, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_0_1());
				}
			)
			    |
			this_STRING_4=RULE_STRING
			{
				$current.merge(this_STRING_4);
			}
			{
				newLeafNode(this_STRING_4, grammarAccess.getQualifiedNameAccess().getSTRINGTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getModifierClassModifierParserRuleCall_0_0());
				}
				lv_modifier_0_0=ruleClassModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_0_0,
						"org.refactor.ModelEditor.ClassModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=Class
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3=Extends
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassAccess().getSuperTypeClassCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			this_BEGIN_5=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_5, grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_4_1_0());
					}
					lv_fields_6_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"fields",
							lv_fields_6_0,
							"org.refactor.ModelEditor.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getClassAccess().getMethodsMethodParserRuleCall_4_2_0());
					}
					lv_methods_7_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClassRule());
						}
						add(
							$current,
							"methods",
							lv_methods_7_0,
							"org.refactor.ModelEditor.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_8=RULE_END
			{
				newLeafNode(this_END_8, grammarAccess.getClassAccess().getENDTerminalRuleCall_4_3());
			}
		)?
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getModifierMemberModifierParserRuleCall_0_0());
				}
				lv_modifier_0_0=ruleMemberModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_0_0,
						"org.refactor.ModelEditor.MemberModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=Colon
			{
				newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFieldAccess().getTypeClassCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getModifierMemberModifierParserRuleCall_0_0());
				}
				lv_modifier_0_0=ruleMemberModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"modifier",
						lv_modifier_0_0,
						"org.refactor.ModelEditor.MemberModifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_1_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_7=Colon
			{
				newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getMethodAccess().getTypeClassCrossReference_5_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			this_BEGIN_9=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_9, grammarAccess.getMethodAccess().getBEGINTerminalRuleCall_6_0());
			}
			(
				(
					(
						lv_loc_10_0=RULE_INT
						{
							newLeafNode(lv_loc_10_0, grammarAccess.getMethodAccess().getLocINTTerminalRuleCall_6_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
							setWithLastConsumed(
								$current,
								"loc",
								lv_loc_10_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_11=Lines
				{
					newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getLinesKeyword_6_1_1());
				}
				otherlv_12=Of
				{
					newLeafNode(otherlv_12, grammarAccess.getMethodAccess().getOfKeyword_6_1_2());
				}
				otherlv_13=Code
				{
					newLeafNode(otherlv_13, grammarAccess.getMethodAccess().getCodeKeyword_6_1_3());
				}
			)?
			(
				(
					(
						lv_cyclo_14_0=RULE_INT
						{
							newLeafNode(lv_cyclo_14_0, grammarAccess.getMethodAccess().getCycloINTTerminalRuleCall_6_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMethodRule());
							}
							setWithLastConsumed(
								$current,
								"cyclo",
								lv_cyclo_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_15=Cyclo
				{
					newLeafNode(otherlv_15, grammarAccess.getMethodAccess().getCycloKeyword_6_2_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getAccessesAccessParserRuleCall_6_3_0());
					}
					lv_accesses_16_0=ruleAccess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"accesses",
							lv_accesses_16_0,
							"org.refactor.ModelEditor.Access");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getCallsCallParserRuleCall_6_4_0());
					}
					lv_calls_17_0=ruleCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"calls",
							lv_calls_17_0,
							"org.refactor.ModelEditor.Call");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			this_END_18=RULE_END
			{
				newLeafNode(this_END_18, grammarAccess.getMethodAccess().getENDTerminalRuleCall_6_5());
			}
		)?
	)
;

// Entry rule entryRuleMemberModifier
entryRuleMemberModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMemberModifierRule()); }
	iv_ruleMemberModifier=ruleMemberModifier
	{ $current=$iv_ruleMemberModifier.current.getText(); }
	EOF;

// Rule MemberModifier
ruleMemberModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Public
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberModifierAccess().getPublicKeyword_0());
		}
		    |
		kw=Private
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberModifierAccess().getPrivateKeyword_1());
		}
		    |
		kw=Protected
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberModifierAccess().getProtectedKeyword_2());
		}
		    |
		kw=Constant
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMemberModifierAccess().getConstantKeyword_3());
		}
	)
;

// Entry rule entryRuleClassModifier
entryRuleClassModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassModifierRule()); }
	iv_ruleClassModifier=ruleClassModifier
	{ $current=$iv_ruleClassModifier.current.getText(); }
	EOF;

// Rule ClassModifier
ruleClassModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Public
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassModifierAccess().getPublicKeyword_0());
		}
		    |
		kw=Private
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassModifierAccess().getPrivateKeyword_1());
		}
		    |
		kw=Constant
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClassModifierAccess().getConstantKeyword_2());
		}
	)
;

// Entry rule entryRuleAccess
entryRuleAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAccessRule()); }
	iv_ruleAccess=ruleAccess
	{ $current=$iv_ruleAccess.current; }
	EOF;

// Rule Access
ruleAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_accesses_0_0=RULE_INT
				{
					newLeafNode(lv_accesses_0_0, grammarAccess.getAccessAccess().getAccessesINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessRule());
					}
					setWithLastConsumed(
						$current,
						"accesses",
						lv_accesses_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1=Access
			{
				newLeafNode(otherlv_1, grammarAccess.getAccessAccess().getAccessKeyword_1_0());
			}
			    |
			otherlv_2=Accesses
			{
				newLeafNode(otherlv_2, grammarAccess.getAccessAccess().getAccessesKeyword_1_1());
			}
		)
		otherlv_3=To
		{
			newLeafNode(otherlv_3, grammarAccess.getAccessAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAccessRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAccessAccess().getFieldFieldCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_calls_0_0=RULE_INT
				{
					newLeafNode(lv_calls_0_0, grammarAccess.getCallAccess().getCallsINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallRule());
					}
					setWithLastConsumed(
						$current,
						"calls",
						lv_calls_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_1=Call
			{
				newLeafNode(otherlv_1, grammarAccess.getCallAccess().getCallKeyword_1_0());
			}
			    |
			otherlv_2=Calls
			{
				newLeafNode(otherlv_2, grammarAccess.getCallAccess().getCallsKeyword_1_1());
			}
		)
		otherlv_3=To
		{
			newLeafNode(otherlv_3, grammarAccess.getCallAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getCallAccess().getMethodMethodCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=LeftParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getCallAccess().getLeftParenthesisKeyword_4());
		}
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getCallAccess().getRightParenthesisKeyword_5());
		}
	)
;
