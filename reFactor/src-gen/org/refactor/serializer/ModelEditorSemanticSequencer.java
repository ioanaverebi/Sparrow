/*
 * generated by Xtext 2.10.0
 */
package org.refactor.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.refactor.modelEditor.Access;
import org.refactor.modelEditor.Call;
import org.refactor.modelEditor.Field;
import org.refactor.modelEditor.Import;
import org.refactor.modelEditor.Method;
import org.refactor.modelEditor.Model;
import org.refactor.modelEditor.ModelEditorPackage;
import org.refactor.services.ModelEditorGrammarAccess;

@SuppressWarnings("all")
public class ModelEditorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelEditorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelEditorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelEditorPackage.ACCESS:
				sequence_Access(context, (Access) semanticObject); 
				return; 
			case ModelEditorPackage.CALL:
				sequence_Call(context, (Call) semanticObject); 
				return; 
			case ModelEditorPackage.CLASS:
				sequence_Class(context, (org.refactor.modelEditor.Class) semanticObject); 
				return; 
			case ModelEditorPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case ModelEditorPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case ModelEditorPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case ModelEditorPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Access returns Access
	 *
	 * Constraint:
	 *     (accesses=INT field=[Field|QualifiedName])
	 */
	protected void sequence_Access(ISerializationContext context, Access semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelEditorPackage.Literals.ACCESS__ACCESSES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelEditorPackage.Literals.ACCESS__ACCESSES));
			if (transientValues.isValueTransient(semanticObject, ModelEditorPackage.Literals.ACCESS__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelEditorPackage.Literals.ACCESS__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAccessAccess().getAccessesINTTerminalRuleCall_0_0(), semanticObject.getAccesses());
		feeder.accept(grammarAccess.getAccessAccess().getFieldFieldQualifiedNameParserRuleCall_3_0_1(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Call returns Call
	 *
	 * Constraint:
	 *     (calls=INT method=[Method|QualifiedName])
	 */
	protected void sequence_Call(ISerializationContext context, Call semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelEditorPackage.Literals.CALL__CALLS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelEditorPackage.Literals.CALL__CALLS));
			if (transientValues.isValueTransient(semanticObject, ModelEditorPackage.Literals.CALL__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelEditorPackage.Literals.CALL__METHOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCallAccess().getCallsINTTerminalRuleCall_0_0(), semanticObject.getCalls());
		feeder.accept(grammarAccess.getCallAccess().getMethodMethodQualifiedNameParserRuleCall_3_0_1(), semanticObject.getMethod());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (modifier=ClassModifier? name=ID superType=[Class|QualifiedName]? fields+=Field* methods+=Method*)
	 */
	protected void sequence_Class(ISerializationContext context, org.refactor.modelEditor.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (modifier=MemberModifier? name=ID type=[Class|QualifiedName]?)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelEditorPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelEditorPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (
	 *         modifier=MemberModifier? 
	 *         name=ID 
	 *         (types+=[Class|QualifiedName] types+=[Class|QualifiedName]*)? 
	 *         type=[Class|QualifiedName]? 
	 *         loc=INT? 
	 *         cyclo=INT? 
	 *         accesses+=Access* 
	 *         calls+=Call*
	 *     )
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((imports+=Import+ classes+=Class+) | classes+=Class+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
