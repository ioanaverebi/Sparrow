/*
 * generated by Xtext 2.10.0
 */
package org.refactor.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.refactor.services.ModelEditorGrammarAccess;

@SuppressWarnings("all")
public class ModelEditorSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ModelEditorGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Access_AccessKeyword_1_0_or_AccessesKeyword_1_1;
	protected AbstractElementAlias match_Call_CallKeyword_1_0_or_CallsKeyword_1_1;
	protected AbstractElementAlias match_Class_ImplementsKeyword_4_0_q;
	protected AbstractElementAlias match_Class___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_3__q;
	protected AbstractElementAlias match_Method___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_5__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ModelEditorGrammarAccess) access;
		match_Access_AccessKeyword_1_0_or_AccessesKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAccessAccess().getAccessKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAccessAccess().getAccessesKeyword_1_1()));
		match_Call_CallKeyword_1_0_or_CallsKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCallAccess().getCallKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCallAccess().getCallsKeyword_1_1()));
		match_Class_ImplementsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getClassAccess().getImplementsKeyword_4_0());
		match_Class___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getClassAccess().getBEGINTerminalRuleCall_5_0()), new TokenAlias(false, false, grammarAccess.getClassAccess().getENDTerminalRuleCall_5_3()));
		match_Method___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_5__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMethodAccess().getBEGINTerminalRuleCall_6_0()), new TokenAlias(false, false, grammarAccess.getMethodAccess().getENDTerminalRuleCall_6_5()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Access_AccessKeyword_1_0_or_AccessesKeyword_1_1.equals(syntax))
				emit_Access_AccessKeyword_1_0_or_AccessesKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Call_CallKeyword_1_0_or_CallsKeyword_1_1.equals(syntax))
				emit_Call_CallKeyword_1_0_or_CallsKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Class_ImplementsKeyword_4_0_q.equals(syntax))
				emit_Class_ImplementsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Class___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_3__q.equals(syntax))
				emit_Class___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_5__q.equals(syntax))
				emit_Method___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_5__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'access' | 'accesses'
	 *
	 * This ambiguous syntax occurs at:
	 *     accesses=INT (ambiguity) 'to' field=[Field|QualifiedName]
	 */
	protected void emit_Access_AccessKeyword_1_0_or_AccessesKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'call' | 'calls'
	 *
	 * This ambiguous syntax occurs at:
	 *     calls=INT (ambiguity) 'to' method=[Method|QualifiedName]
	 */
	protected void emit_Call_CallKeyword_1_0_or_CallsKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'implements'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (BEGIN END)? (rule end)
	 *     name=ID (ambiguity) BEGIN fields+=Field
	 *     name=ID (ambiguity) BEGIN methods+=Method
	 *     superClass=[Class|QualifiedName] (ambiguity) (BEGIN END)? (rule end)
	 *     superClass=[Class|QualifiedName] (ambiguity) BEGIN fields+=Field
	 *     superClass=[Class|QualifiedName] (ambiguity) BEGIN methods+=Method
	 */
	protected void emit_Class_ImplementsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'implements'? (ambiguity) (rule end)
	 *     superClass=[Class|QualifiedName] 'implements'? (ambiguity) (rule end)
	 *     superTypes+=[Class|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_Class___BEGINTerminalRuleCall_5_0_ENDTerminalRuleCall_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) (rule end)
	 *     type=[Class|QualifiedName] (ambiguity) (rule end)
	 *     types+=[Class|QualifiedName] ')' (ambiguity) (rule end)
	 */
	protected void emit_Method___BEGINTerminalRuleCall_6_0_ENDTerminalRuleCall_6_5__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
