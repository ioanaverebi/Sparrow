/*
 * generated by Xtext 2.10.0
 */
parser grammar InternalModelEditorParser;

options {
	tokenVocab=InternalModelEditorLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.refactor.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.refactor.services.ModelEditorGrammarAccess;

}
@members {
	private ModelEditorGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("FullStopAsterisk", "'.*'");
		tokenNameToValue.put("Of", "'of'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("Call", "'call'");
		tokenNameToValue.put("Code", "'code'");
		tokenNameToValue.put("Calls", "'calls'");
		tokenNameToValue.put("Class", "'class'");
		tokenNameToValue.put("Cyclo", "'cyclo'");
		tokenNameToValue.put("Lines", "'lines'");
		tokenNameToValue.put("Access", "'access'");
		tokenNameToValue.put("Import", "'import'");
		tokenNameToValue.put("Public", "'public'");
		tokenNameToValue.put("Extends", "'extends'");
		tokenNameToValue.put("Private", "'private'");
		tokenNameToValue.put("Accesses", "'accesses'");
		tokenNameToValue.put("Constant", "'constant'");
		tokenNameToValue.put("Protected", "'protected'");
	}

	public void setGrammarAccess(ModelEditorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberModifier
entryRuleMemberModifier
:
{ before(grammarAccess.getMemberModifierRule()); }
	 ruleMemberModifier
{ after(grammarAccess.getMemberModifierRule()); } 
	 EOF 
;

// Rule MemberModifier
ruleMemberModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberModifierAccess().getAlternatives()); }
		(rule__MemberModifier__Alternatives)
		{ after(grammarAccess.getMemberModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassModifier
entryRuleClassModifier
:
{ before(grammarAccess.getClassModifierRule()); }
	 ruleClassModifier
{ after(grammarAccess.getClassModifierRule()); } 
	 EOF 
;

// Rule ClassModifier
ruleClassModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassModifierAccess().getAlternatives()); }
		(rule__ClassModifier__Alternatives)
		{ after(grammarAccess.getClassModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAccess
entryRuleAccess
:
{ before(grammarAccess.getAccessRule()); }
	 ruleAccess
{ after(grammarAccess.getAccessRule()); } 
	 EOF 
;

// Rule Access
ruleAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAccessAccess().getGroup()); }
		(rule__Access__Group__0)
		{ after(grammarAccess.getAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCall
entryRuleCall
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallAccess().getGroup()); }
		(rule__Call__Group__0)
		{ after(grammarAccess.getCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberModifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberModifierAccess().getPublicKeyword_0()); }
		Public
		{ after(grammarAccess.getMemberModifierAccess().getPublicKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMemberModifierAccess().getPrivateKeyword_1()); }
		Private
		{ after(grammarAccess.getMemberModifierAccess().getPrivateKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMemberModifierAccess().getProtectedKeyword_2()); }
		Protected
		{ after(grammarAccess.getMemberModifierAccess().getProtectedKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMemberModifierAccess().getConstantKeyword_3()); }
		Constant
		{ after(grammarAccess.getMemberModifierAccess().getConstantKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassModifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassModifierAccess().getPublicKeyword_0()); }
		Public
		{ after(grammarAccess.getClassModifierAccess().getPublicKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassModifierAccess().getPrivateKeyword_1()); }
		Private
		{ after(grammarAccess.getClassModifierAccess().getPrivateKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getClassModifierAccess().getConstantKeyword_2()); }
		Constant
		{ after(grammarAccess.getClassModifierAccess().getConstantKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessAccess().getAccessKeyword_1_0()); }
		Access
		{ after(grammarAccess.getAccessAccess().getAccessKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAccessAccess().getAccessesKeyword_1_1()); }
		Accesses
		{ after(grammarAccess.getAccessAccess().getAccessesKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getCallKeyword_1_0()); }
		Call
		{ after(grammarAccess.getCallAccess().getCallKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCallAccess().getCallsKeyword_1_1()); }
		Calls
		{ after(grammarAccess.getCallAccess().getCallsKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
	(rule__Model__ImportsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getClassesAssignment_1()); }
	(rule__Model__ClassesAssignment_1)*
	{ after(grammarAccess.getModelAccess().getClassesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	Import
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	(FullStopAsterisk)?
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	FullStop
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getModifierAssignment_0()); }
	(rule__Class__ModifierAssignment_0)?
	{ after(grammarAccess.getClassAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_1()); }
	Class
	{ after(grammarAccess.getClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_2()); }
	(rule__Class__NameAssignment_2)
	{ after(grammarAccess.getClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_3()); }
	(rule__Class__Group_3__0)?
	{ after(grammarAccess.getClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_4()); }
	(rule__Class__Group_4__0)?
	{ after(grammarAccess.getClassAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__0__Impl
	rule__Class__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getExtendsKeyword_3_0()); }
	Extends
	{ after(grammarAccess.getClassAccess().getExtendsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSuperTypeAssignment_3_1()); }
	(rule__Class__SuperTypeAssignment_3_1)
	{ after(grammarAccess.getClassAccess().getSuperTypeAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__0__Impl
	rule__Class__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0()); }
	RULE_BEGIN
	{ after(grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__1__Impl
	rule__Class__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getFieldsAssignment_4_1()); }
	(rule__Class__FieldsAssignment_4_1)*
	{ after(grammarAccess.getClassAccess().getFieldsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__2__Impl
	rule__Class__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getMethodsAssignment_4_2()); }
	(rule__Class__MethodsAssignment_4_2)*
	{ after(grammarAccess.getClassAccess().getMethodsAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getENDTerminalRuleCall_4_3()); }
	RULE_END
	{ after(grammarAccess.getClassAccess().getENDTerminalRuleCall_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getModifierAssignment_0()); }
	(rule__Field__ModifierAssignment_0)?
	{ after(grammarAccess.getFieldAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
	(rule__Field__NameAssignment_1)
	{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getGroup_2()); }
	(rule__Field__Group_2__0)?
	{ after(grammarAccess.getFieldAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group_2__0__Impl
	rule__Field__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getColonKeyword_2_0()); }
	Colon
	{ after(grammarAccess.getFieldAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getTypeAssignment_2_1()); }
	(rule__Field__TypeAssignment_2_1)
	{ after(grammarAccess.getFieldAccess().getTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getModifierAssignment_0()); }
	(rule__Method__ModifierAssignment_0)?
	{ after(grammarAccess.getMethodAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
	(rule__Method__NameAssignment_1)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_3()); }
	(rule__Method__Group_3__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_5()); }
	(rule__Method__Group_5__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6()); }
	(rule__Method__Group_6__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__0__Impl
	rule__Method__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getTypesAssignment_3_0()); }
	(rule__Method__TypesAssignment_3_0)
	{ after(grammarAccess.getMethodAccess().getTypesAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_3_1()); }
	(rule__Method__Group_3_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3_1__0__Impl
	rule__Method__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_3_1_0()); }
	Comma
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getTypesAssignment_3_1_1()); }
	(rule__Method__TypesAssignment_3_1_1)
	{ after(grammarAccess.getMethodAccess().getTypesAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5__0__Impl
	rule__Method__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getColonKeyword_5_0()); }
	Colon
	{ after(grammarAccess.getMethodAccess().getColonKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getTypeAssignment_5_1()); }
	(rule__Method__TypeAssignment_5_1)
	{ after(grammarAccess.getMethodAccess().getTypeAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__0__Impl
	rule__Method__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getBEGINTerminalRuleCall_6_0()); }
	RULE_BEGIN
	{ after(grammarAccess.getMethodAccess().getBEGINTerminalRuleCall_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__1__Impl
	rule__Method__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6_1()); }
	(rule__Method__Group_6_1__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__2__Impl
	rule__Method__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6_2()); }
	(rule__Method__Group_6_2__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__3__Impl
	rule__Method__Group_6__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getAccessesAssignment_6_3()); }
	(rule__Method__AccessesAssignment_6_3)*
	{ after(grammarAccess.getMethodAccess().getAccessesAssignment_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__4__Impl
	rule__Method__Group_6__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCallsAssignment_6_4()); }
	(rule__Method__CallsAssignment_6_4)*
	{ after(grammarAccess.getMethodAccess().getCallsAssignment_6_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getENDTerminalRuleCall_6_5()); }
	RULE_END
	{ after(grammarAccess.getMethodAccess().getENDTerminalRuleCall_6_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__0__Impl
	rule__Method__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLocAssignment_6_1_0()); }
	(rule__Method__LocAssignment_6_1_0)
	{ after(grammarAccess.getMethodAccess().getLocAssignment_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__1__Impl
	rule__Method__Group_6_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLinesKeyword_6_1_1()); }
	Lines
	{ after(grammarAccess.getMethodAccess().getLinesKeyword_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__2__Impl
	rule__Method__Group_6_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getOfKeyword_6_1_2()); }
	Of
	{ after(grammarAccess.getMethodAccess().getOfKeyword_6_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCodeKeyword_6_1_3()); }
	Code
	{ after(grammarAccess.getMethodAccess().getCodeKeyword_6_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_2__0__Impl
	rule__Method__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCycloAssignment_6_2_0()); }
	(rule__Method__CycloAssignment_6_2_0)
	{ after(grammarAccess.getMethodAccess().getCycloAssignment_6_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCycloKeyword_6_2_1()); }
	Cyclo
	{ after(grammarAccess.getMethodAccess().getCycloKeyword_6_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Access__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__0__Impl
	rule__Access__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getAccessesAssignment_0()); }
	(rule__Access__AccessesAssignment_0)
	{ after(grammarAccess.getAccessAccess().getAccessesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__1__Impl
	rule__Access__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getAlternatives_1()); }
	(rule__Access__Alternatives_1)
	{ after(grammarAccess.getAccessAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__2__Impl
	rule__Access__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getToKeyword_2()); }
	To
	{ after(grammarAccess.getAccessAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Access__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessAccess().getFieldAssignment_3()); }
	(rule__Access__FieldAssignment_3)
	{ after(grammarAccess.getAccessAccess().getFieldAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getCallsAssignment_0()); }
	(rule__Call__CallsAssignment_0)
	{ after(grammarAccess.getCallAccess().getCallsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getAlternatives_1()); }
	(rule__Call__Alternatives_1)
	{ after(grammarAccess.getCallAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getToKeyword_2()); }
	To
	{ after(grammarAccess.getCallAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getMethodAssignment_3()); }
	(rule__Call__MethodAssignment_3)
	{ after(grammarAccess.getCallAccess().getMethodAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__4__Impl
	rule__Call__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_4()); }
	LeftParenthesis
	{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ClassesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getClassesClassParserRuleCall_1_0()); }
		ruleClass
		{ after(grammarAccess.getModelAccess().getClassesClassParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getModifierClassModifierParserRuleCall_0_0()); }
		ruleClassModifier
		{ after(grammarAccess.getClassAccess().getModifierClassModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SuperTypeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getSuperTypeClassCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getClassAccess().getSuperTypeClassQualifiedNameParserRuleCall_3_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getClassAccess().getSuperTypeClassQualifiedNameParserRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getClassAccess().getSuperTypeClassCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__FieldsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_4_1_0()); }
		ruleField
		{ after(grammarAccess.getClassAccess().getFieldsFieldParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__MethodsAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getMethodsMethodParserRuleCall_4_2_0()); }
		ruleMethod
		{ after(grammarAccess.getClassAccess().getMethodsMethodParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getModifierMemberModifierParserRuleCall_0_0()); }
		ruleMemberModifier
		{ after(grammarAccess.getFieldAccess().getModifierMemberModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getTypeClassCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getFieldAccess().getTypeClassQualifiedNameParserRuleCall_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getFieldAccess().getTypeClassQualifiedNameParserRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getFieldAccess().getTypeClassCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getModifierMemberModifierParserRuleCall_0_0()); }
		ruleMemberModifier
		{ after(grammarAccess.getMethodAccess().getModifierMemberModifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__TypesAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_0_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getTypesClassQualifiedNameParserRuleCall_3_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodAccess().getTypesClassQualifiedNameParserRuleCall_3_0_0_1()); }
		)
		{ after(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__TypesAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_1_1_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getTypesClassQualifiedNameParserRuleCall_3_1_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodAccess().getTypesClassQualifiedNameParserRuleCall_3_1_1_0_1()); }
		)
		{ after(grammarAccess.getMethodAccess().getTypesClassCrossReference_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__TypeAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getTypeClassCrossReference_5_1_0()); }
		(
			{ before(grammarAccess.getMethodAccess().getTypeClassQualifiedNameParserRuleCall_5_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getMethodAccess().getTypeClassQualifiedNameParserRuleCall_5_1_0_1()); }
		)
		{ after(grammarAccess.getMethodAccess().getTypeClassCrossReference_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__LocAssignment_6_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getLocINTTerminalRuleCall_6_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMethodAccess().getLocINTTerminalRuleCall_6_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__CycloAssignment_6_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getCycloINTTerminalRuleCall_6_2_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMethodAccess().getCycloINTTerminalRuleCall_6_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__AccessesAssignment_6_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getAccessesAccessParserRuleCall_6_3_0()); }
		ruleAccess
		{ after(grammarAccess.getMethodAccess().getAccessesAccessParserRuleCall_6_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__CallsAssignment_6_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getCallsCallParserRuleCall_6_4_0()); }
		ruleCall
		{ after(grammarAccess.getMethodAccess().getCallsCallParserRuleCall_6_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__AccessesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessAccess().getAccessesINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getAccessAccess().getAccessesINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Access__FieldAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessAccess().getFieldFieldCrossReference_3_0()); }
		(
			{ before(grammarAccess.getAccessAccess().getFieldFieldQualifiedNameParserRuleCall_3_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getAccessAccess().getFieldFieldQualifiedNameParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getAccessAccess().getFieldFieldCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__CallsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getCallsINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getCallAccess().getCallsINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__MethodAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCallAccess().getMethodMethodCrossReference_3_0()); }
		(
			{ before(grammarAccess.getCallAccess().getMethodMethodQualifiedNameParserRuleCall_3_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getCallAccess().getMethodMethodQualifiedNameParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getCallAccess().getMethodMethodCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
