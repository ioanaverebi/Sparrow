/*
 * generated by Xtext 2.10.0
 */
package org.refactor.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.refactor.ide.contentassist.antlr.internal.InternalModelEditorParser;
import org.refactor.services.ModelEditorGrammarAccess;

public class ModelEditorParser extends AbstractContentAssistParser {

	@Inject
	private ModelEditorGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalModelEditorParser createParser() {
		InternalModelEditorParser result = new InternalModelEditorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new ModelEditorTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQualifiedNameAccess().getAlternatives_0(), "rule__QualifiedName__Alternatives_0");
					put(grammarAccess.getQualifiedNameAccess().getAlternatives_1(), "rule__QualifiedName__Alternatives_1");
					put(grammarAccess.getMemberModifierAccess().getAlternatives(), "rule__MemberModifier__Alternatives");
					put(grammarAccess.getClassModifierAccess().getAlternatives(), "rule__ClassModifier__Alternatives");
					put(grammarAccess.getAccessAccess().getAlternatives_1(), "rule__Access__Alternatives_1");
					put(grammarAccess.getCallAccess().getAlternatives_1(), "rule__Call__Alternatives_1");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1_0(), "rule__QualifiedName__Group_1_0__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
					put(grammarAccess.getClassAccess().getGroup_4(), "rule__Class__Group_4__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldAccess().getGroup_2(), "rule__Field__Group_2__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
					put(grammarAccess.getMethodAccess().getGroup_5(), "rule__Method__Group_5__0");
					put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
					put(grammarAccess.getMethodAccess().getGroup_6_1(), "rule__Method__Group_6_1__0");
					put(grammarAccess.getMethodAccess().getGroup_6_2(), "rule__Method__Group_6_2__0");
					put(grammarAccess.getAccessAccess().getGroup(), "rule__Access__Group__0");
					put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getClassesAssignment_1(), "rule__Model__ClassesAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getClassAccess().getModifierAssignment_0(), "rule__Class__ModifierAssignment_0");
					put(grammarAccess.getClassAccess().getNameAssignment_2(), "rule__Class__NameAssignment_2");
					put(grammarAccess.getClassAccess().getSuperTypeAssignment_3_1(), "rule__Class__SuperTypeAssignment_3_1");
					put(grammarAccess.getClassAccess().getFieldsAssignment_4_1(), "rule__Class__FieldsAssignment_4_1");
					put(grammarAccess.getClassAccess().getMethodsAssignment_4_2(), "rule__Class__MethodsAssignment_4_2");
					put(grammarAccess.getFieldAccess().getModifierAssignment_0(), "rule__Field__ModifierAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getTypeAssignment_2_1(), "rule__Field__TypeAssignment_2_1");
					put(grammarAccess.getMethodAccess().getModifierAssignment_0(), "rule__Method__ModifierAssignment_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getTypesAssignment_3_0(), "rule__Method__TypesAssignment_3_0");
					put(grammarAccess.getMethodAccess().getTypesAssignment_3_1_1(), "rule__Method__TypesAssignment_3_1_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_5_1(), "rule__Method__TypeAssignment_5_1");
					put(grammarAccess.getMethodAccess().getLocAssignment_6_1_0(), "rule__Method__LocAssignment_6_1_0");
					put(grammarAccess.getMethodAccess().getCycloAssignment_6_2_0(), "rule__Method__CycloAssignment_6_2_0");
					put(grammarAccess.getMethodAccess().getAccessesAssignment_6_3(), "rule__Method__AccessesAssignment_6_3");
					put(grammarAccess.getMethodAccess().getCallsAssignment_6_4(), "rule__Method__CallsAssignment_6_4");
					put(grammarAccess.getAccessAccess().getAccessesAssignment_0(), "rule__Access__AccessesAssignment_0");
					put(grammarAccess.getAccessAccess().getFieldAssignment_3(), "rule__Access__FieldAssignment_3");
					put(grammarAccess.getCallAccess().getCallsAssignment_0(), "rule__Call__CallsAssignment_0");
					put(grammarAccess.getCallAccess().getMethodAssignment_3(), "rule__Call__MethodAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalModelEditorParser typedParser = (InternalModelEditorParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT" };
	}

	public ModelEditorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ModelEditorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
